{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Polyline, Geojson, Marker } from 'react-native-maps';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { Component } from 'react';\nvar token = \"5b3ce3597851110001cf62482aaf657c34df44068c64b8e72e426522\";\n\nvar markerIcon = require(\"./assets/markerDirection.png\");\n\nvar Direction = function (_Component) {\n  _inherits(Direction, _Component);\n\n  var _super = _createSuper(Direction);\n\n  function Direction(props) {\n    var _this;\n\n    _classCallCheck(this, Direction);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      makedPath: false\n    };\n    return _this;\n  }\n\n  _createClass(Direction, [{\n    key: \"makeDirection\",\n    value: function makeDirection(start, end) {\n      var _this2 = this;\n\n      fetch(\"https://api.openrouteservice.org/v2/directions/cycling-electric/geojson\", {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8',\n          'Content-Type': 'application/json',\n          'Authorization': token\n        },\n        body: \"{\\\"coordinates\\\":[[\" + start.coords.longitude + \",\" + start.coords.latitude + \"],[\" + end + \"]],\\\"radiuses\\\":[1000]}\"\n      }).then(function (responce) {\n        return responce.json();\n      }).then(function (responce) {\n        if (responce.hasOwnProperty('error')) {\n          Alert.alert(\"Помилка\", \"\\u041D\\u0435\\u043C\\u043E\\u0436\\u043B\\u0438\\u0432\\u043E \\u043F\\u043E\\u0431\\u0443\\u0434\\u0443\\u0432\\u0430\\u0442\\u0438 \\u043C\\u0430\\u0440\\u0448\\u0440\\u0443\\u0442, \\u043A\\u043E\\u0434 \\u043F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0438: \" + responce.error.code, [{\n            text: \"Ok\"\n          }]);\n          return;\n        }\n\n        var coords = responce.features[0].geometry.coordinates.map(function (element) {\n          return {\n            latitude: element[1],\n            longitude: element[0]\n          };\n        });\n\n        _this2.setState({\n          makedPath: true,\n          coords: coords\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, null, this.state.makedPath && React.createElement(Polyline, {\n        coordinates: this.state.coords,\n        lineDashPattern: [10],\n        strokeColor: \"red\",\n        strokeWidth: 10\n      }), this.state.makedPath && React.createElement(Marker, {\n        coordinate: this.state.coords[0],\n        icon: markerIcon\n      }), this.state.makedPath && React.createElement(Marker, {\n        coordinate: this.state.coords[this.state.coords.length - 1],\n        icon: markerIcon\n      }));\n    }\n  }]);\n\n  return Direction;\n}(Component);\n\nexport default Direction;","map":{"version":3,"sources":["C:/Users/vahai/Documents/space/WEBDEV/direction.js"],"names":["Polyline","Geojson","Marker","React","Component","token","markerIcon","require","Direction","props","state","makedPath","start","end","fetch","method","headers","body","coords","longitude","latitude","then","responce","json","hasOwnProperty","Alert","alert","error","code","text","features","geometry","coordinates","map","element","setState","length"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,MAA5B,QAA0C,mBAA1C;;;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,IAAMC,KAAK,GAAG,0DAAd;;AACA,IAAMC,UAAU,GAAGC,OAAO,gCAA1B;;IAEMC,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE;AADA,KAAb;AAFiB;AAKlB;;;;WAED,uBAAcC,KAAd,EAAqBC,GAArB,EAA0B;AAAA;;AACxBC,MAAAA,KAAK,CAAC,yEAAD,EAA4E;AAC/EC,QAAAA,MAAM,EAAE,MADuE;AAE/EC,QAAAA,OAAO,EAAE;AACP,oBAAU,qFADH;AAEP,0BAAgB,kBAFT;AAGP,2BAAiBX;AAHV,SAFsE;AAO/EY,QAAAA,IAAI,0BAAsBL,KAAK,CAACM,MAAN,CAAaC,SAAnC,SAAgDP,KAAK,CAACM,MAAN,CAAaE,QAA7D,WAA2EP,GAA3E;AAP2E,OAA5E,CAAL,CASCQ,IATD,CASM,UAAAC,QAAQ,EAAI;AAAC,eAAOA,QAAQ,CAACC,IAAT,EAAP;AAAuB,OAT1C,EAUCF,IAVD,CAUM,UAAAC,QAAQ,EAAI;AAChB,YAAIA,QAAQ,CAACE,cAAT,CAAwB,OAAxB,CAAJ,EAAsC;AACpCC,UAAAA,KAAK,CAACC,KAAN,CACE,SADF,sOAEgDJ,QAAQ,CAACK,KAAT,CAAeC,IAF/D,EAGE,CACE;AAACC,YAAAA,IAAI,EAAE;AAAP,WADF,CAHF;AAOA;AACD;;AACD,YAAIX,MAAM,GAAGI,QAAQ,CAACQ,QAAT,CAAkB,CAAlB,EAAqBC,QAArB,CAA8BC,WAA9B,CAA0CC,GAA1C,CAA8C,UAAAC,OAAO,EAAI;AAAC,iBAAO;AAC1Ed,YAAAA,QAAQ,EAAEc,OAAO,CAAC,CAAD,CADyD;AAE1Ef,YAAAA,SAAS,EAAEe,OAAO,CAAC,CAAD;AAFwD,WAAP;AAGnE,SAHS,CAAb;;AAIA,QAAA,MAAI,CAACC,QAAL,CAAc;AACZxB,UAAAA,SAAS,EAAE,IADC;AAEZO,UAAAA,MAAM,EAAEA;AAFI,SAAd;AAID,OA7BD;AA8BD;;;WAED,kBAAS;AACP,aACE,oBAAC,IAAD,QACI,KAAKR,KAAL,CAAWC,SAAX,IAAwB,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAE,KAAKD,KAAL,CAAWQ,MAAlC;AAA0C,QAAA,eAAe,EAAE,CAAC,EAAD,CAA3D;AAAiE,QAAA,WAAW,EAAC,KAA7E;AAAmF,QAAA,WAAW,EAAE;AAAhG,QAD5B,EAEI,KAAKR,KAAL,CAAWC,SAAX,IAAwB,oBAAC,MAAD;AAAQ,QAAA,UAAU,EAAE,KAAKD,KAAL,CAAWQ,MAAX,CAAkB,CAAlB,CAApB;AAA0C,QAAA,IAAI,EAAEZ;AAAhD,QAF5B,EAGI,KAAKI,KAAL,CAAWC,SAAX,IAAwB,oBAAC,MAAD;AAAQ,QAAA,UAAU,EAAE,KAAKD,KAAL,CAAWQ,MAAX,CAAkB,KAAKR,KAAL,CAAWQ,MAAX,CAAkBkB,MAAlB,GAAyB,CAA3C,CAApB;AAAmE,QAAA,IAAI,EAAE9B;AAAzE,QAH5B,CADF;AAOD;;;;EAjDqBF,S;;AAoDxB,eAAeI,SAAf","sourcesContent":["import { Polyline, Geojson, Marker } from 'react-native-maps';\r\nimport { Alert, View } from 'react-native';\r\nimport React, { Component } from 'react';\r\n\r\nconst token = \"5b3ce3597851110001cf62482aaf657c34df44068c64b8e72e426522\";\r\nconst markerIcon = require(\"./assets/markerDirection.png\");\r\n\r\nclass Direction extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      makedPath: false,\r\n    };\r\n  }\r\n\r\n  makeDirection(start, end) {\r\n    fetch(\"https://api.openrouteservice.org/v2/directions/cycling-electric/geojson\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Accept': 'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8',\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token,\r\n      },\r\n      body: `{\"coordinates\":[[${start.coords.longitude},${start.coords.latitude}],[${end}]],\"radiuses\":[1000]}`,\r\n    })\r\n    .then(responce => {return responce.json()})\r\n    .then(responce => {\r\n      if (responce.hasOwnProperty('error')) {\r\n        Alert.alert(\r\n          \"Помилка\",\r\n          `Неможливо побудувати маршрут, код помилки: ${responce.error.code}`,\r\n          [\r\n            {text: \"Ok\"},\r\n          ]\r\n        )\r\n        return\r\n      }\r\n      let coords = responce.features[0].geometry.coordinates.map(element => {return {\r\n          latitude: element[1],\r\n          longitude: element[0],\r\n        }});\r\n      this.setState({\r\n        makedPath: true,\r\n        coords: coords,\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View>\r\n        { this.state.makedPath && <Polyline coordinates={this.state.coords} lineDashPattern={[10]} strokeColor=\"red\" strokeWidth={10}/> }\r\n        { this.state.makedPath && <Marker coordinate={this.state.coords[0]} icon={markerIcon}/>}\r\n        { this.state.makedPath && <Marker coordinate={this.state.coords[this.state.coords.length-1]} icon={markerIcon}/>}\r\n      </View>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Direction;"]},"metadata":{},"sourceType":"module"}